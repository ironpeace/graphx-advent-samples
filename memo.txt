


val circleGraph = Pregel(
 // 各頂点に空のリストをセットしたグラフを処理する
 graph.mapVertices((id, attr) => Set[VertexId]()), 
 // 最初に辺を流すメッセージは空のグラフ
 Set[VertexId](),
 // 4階層以内で還流しているところを探す
 4,
 // メッセージを送る方向
 EdgeDirection.Out) (
  // 自分のリストと、渡って来たリストを合体させる
  (id, attr, msg) => (msg ++ attr),
  // Srcが持っているリストにSrcのIDを追加してDstに渡す
  edge => Iterator((edge.dstId, (edge.srcAttr + edge.srcId))),
  // 複数Dstから送られて来たリストを合体させる
  (a, b) => (a ++ b)
// リストに自分のIDが入っている頂点が「輪」の中にいる頂点
).subgraph(vpred = (id, attr) => attr.contains(id))	






// 短い方の距離を選定
def minRouteDepth(v1:(VertexId, Int), v2:(VertexId, Int))
　= if(v1._2 < v2._2) v1 else v2

// 頂点毎に持つ、他頂点との距離情報の集約
def mergeVertexRoute(oldRoute:List[(VertexId, Int)], newRoute:List[(VertexId, Int)])
 　= (oldRoute ++ newRoute)
 　　//頂点Idでグルーピング
 　　.groupBy(_._1)
 　　//頂点Idでグルーピングされた中で距離の短い方を選択
 　　.map(_._2.reduce((v1, v2) => minRouteDepth(v1, v2)))
 　　.toList

val graphWithDistance = Pregel(
  // 他頂点の距離のリストを頂点に持たせる
  graph.mapVertices((id:VertexId, attr:Int) => List((id, 0))), 
  //最初に流すメッセージは空のリスト
  List[(VertexId, Int)](),
  // イテレーション回数は指定しない
  Int.MaxValue,
  // Out方向にメッセージ送信する
  EdgeDirection.Out
  )(
  // 各頂点では、送られて来たメッセージ内にある他頂点とその距離に対して、１を足して行き、
  // それと自分が持つ情報とを、距離が短い方を選択しつつ集約していく。
  (id, attr, msg) => mergeVertexRoute(attr, msg.map(a=> (a._1, a._2 + 1))),
  edge => {
   // srcが持つ他頂点との距離リストの中に、dstの頂点IDがあれば循環していると判断
   val isCyclic = edge.srcAttr.filter(_._1 == edge.dstId).nonEmpty
   // 循環しているようであれば、既に距離は計測済みなので何も送信しない。
   // さもなければ、dstに対してsrcが持つ、他頂点とその距離のリストを送る
   if(isCyclic) Iterator.empty else Iterator((edge.dstId, edge.srcAttr))
　},
　// 複数のsrcから送られて来たリストは単純合体させる
　(m1, m2) => m1 ++ m2
)





val sumAttrList:VertexRDD[Long] = graph.mapReduceTriplets(
  mapFunc = edge => Iterator((edge.srcId, edge.attr)),
  reduceFunc = (a:Long, b:Long) => a + b)

val graph3:Graph[(Long, Long, Long, Long), Long]  
 = graph.outerJoinVertices(sumAttrList){ 
  (vid:VertexId, oldAttr:Long, sumEdgesAttrOpt:Option[Long]) => {
   (oldAttr, 0, sumEdgesAttrOpt.getOrElse(0), oldAttr)}} 

val graph4:Graph[(Long, Long, Long, Long), Float]  
 = graph3.mapTriplets(edge => edge.attr.toFloat / edge.srcAttr._3.toFloat)

val graph5:Graph[(Long, Long, Long, Long), Float] = Pregel(
 graph4, 0L, activeDirection = EdgeDirection.Out) (
 (id, attr, msg) => {
  val stock = attr._1, ready = attr._2, sum = attr._3, origin = attr._4
  val tmpStock = stock + msg
  val isEnough = if(tmpStock >= sum) true else false
  val afterSum = if(isEnough) 0 else sum - tmpStock
  val afterReady = if(isEnough) sum else tmpStock
  val afterStock = if(isEnough) tmpStock - sum else 0
  (afterStock, afterReady, afterSum, origin)},
 edge => {
  val stock = edge.srcAttr._1, ready = edge.srcAttr._2,
      sum = edge.srcAttr._3, origin = edge.srcAttr._4, rate = edge.attr
  if(ready <= 0) Iterator.empty
  else Iterator((edge.dstId, (ready * rate).toLong))},
 (a, b) => (a + b))






